void merge(int arr[], int left, int middle, int right)
{
    int n1 = middle - left + 1;
    int n2 = right - middle;

    // Тимчасові масиви для зберігання елементів
    int *leftArr = new int[n1];
    int *rightArr = new int[n2];

    // Копіюємо дані в тимчасові масиви
    for (int i = 0; i < n1; ++i)
        leftArr[i] = arr[left + i];
    for (int j = 0; j < n2; ++j)
        rightArr[j] = arr[middle + 1 + j];

    // Індекси для об'єднання підмасивів
    int i = 0, j = 0, k = left;

    // Зливаємо два масиви у початковий
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    // Копіюємо залишки з лівого підмасиву, якщо є
    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    // Копіюємо залишки з правого підмасиву, якщо є
    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }

    // Видаляємо тимчасові масиви
    delete[] leftArr;
    delete[] rightArr;
}

// Основна функція для сортування злиттям
void mergeSort(int arr[], int left, int right)
{
    if (left < right) {
        // Обчислюємо середню точку
        int middle = left + (right - left) / 2;

        // Рекурсивно сортуємо першу і другу половину
        mergeSort(arr, left, middle);
        mergeSort(arr, middle + 1, right);

        // Об'єднуємо відсортовані половини
        merge(arr, left, middle, right);
    }
}